<%= RSpecDocumentation.template('bootstrap', :js).result %>

(() => {
  const pageTree = document.querySelector('.page-tree');
  const getParentElement = (element) => document.querySelector(element.dataset.parentId);
  const pageSearchTokens = {};

  const initPageTree = () => {
    const isRootElement = (element) => !getParentElement(element);
    const isChildActive = (element) => !!element.querySelectorAll('.active').length;
    const isSiblingActive = (element) => !!getParentElement(element).querySelectorAll('.active').length;
    const isActive = (element) => element && element.classList.contains('active');
    const isSelfOrParentActive = (element) => {
      const listItemSelector = `[data-list-item-id="#${element.id}"]`;
      const item = document.querySelector(listItemSelector);

      if (isActive(item)) return true;
      if (isActive(getParentElement(element))) return true;

      return false;
    };

    const visibilityCriteria = [isRootElement, isSelfOrParentActive, isChildActive, isSiblingActive];

    pageTree.querySelectorAll('li').forEach((element) => {
      element.classList.remove('search-active');
      pageSearchTokens[element.id] = JSON.parse(element.dataset.searchTokens);

      if (!visibilityCriteria.some((criterion) => criterion(element))) {
        element.classList.add('d-none');
      } else {
        element.classList.remove('d-none');
      }
    });
    pageTree.classList.remove('hidden');
  };

  const initThemeSwitcher = () => {
    const lightButton = document.querySelector('.theme-switcher .theme-light-icon');
    const darkButton = document.querySelector('.theme-switcher .theme-dark-icon');
    const html = document.querySelector('html');
    const initialTheme = localStorage.getItem('rspec-documentation-theme') || 'light';

    lightButton.addEventListener('click', () => {
      lightButton.classList.add('d-none');
      darkButton.classList.remove('d-none');
      html.dataset.bsTheme = 'dark';
      localStorage.setItem('rspec-documentation-theme', 'dark');
    });

    darkButton.addEventListener('click', () => {
      darkButton.classList.add('d-none');
      lightButton.classList.remove('d-none');
      html.dataset.bsTheme = 'light';
      localStorage.setItem('rspec-documentation-theme', 'light');
    });

    html.dataset.bsTheme = initialTheme;

    if (initialTheme === 'light') {
      lightButton.classList.remove('d-none');
    } else {
      darkButton.classList.remove('d-none');
    }
  };

  document.querySelectorAll('button.modal-dialog-maximize').forEach((element) => {
    element.addEventListener('click', () => {
      document.querySelector(element.dataset.modalDialogId).classList.toggle('modal-fullscreen');
    });
  });

  initTableOfContents = () => {
    const tableOfContents = document.querySelector('#markdown-toc');

    if (!tableOfContents) return;

    const wrapper = document.createElement('div');
    const content = document.querySelector('div.content');
    const title = document.createElement('div');

    title.append('Links');
    title.classList.add('title');
    wrapper.append(title);
    wrapper.append(tableOfContents);
    wrapper.classList.add('table-of-contents-wrapper');
    content.prepend(wrapper);
  };

  initIndexSearch = () => {
    const indexSearch = document.querySelector('.index-search');
    const indexSearchField = indexSearch.querySelector('input');
    const getQueryTokens = () => indexSearchField.value.toLowerCase().split(/\s+/);

    indexSearch.addEventListener('keyup', (ev) => searchIndex(getQueryTokens()));
    indexSearch.addEventListener('change', (ev) => searchIndex(getQueryTokens()));

    searchIndex = (searchTokens) => {
      if (!searchTokens.every((searchToken) => searchToken)) {
        initPageTree();
        return;
      }

      const unhideRecursively = (element) => {
        const parentElement = getParentElement(element);

        element.classList.remove('d-none');

        if (parentElement) unhideRecursively(parentElement);
      };

      const getMatchingTokens = (tokens) => {
        const anyMatchingTokens = (token) => tokens.some((expectedToken) => expectedToken.includes(token))
        return searchTokens.filter((token) => anyMatchingTokens(token));
      };

      pageTree.querySelectorAll('li').forEach((element) => {
        const elementSearchTokens = pageSearchTokens[element.id];

        if (getMatchingTokens(elementSearchTokens).length) {
          element.classList.add('search-active');
          unhideRecursively(element);
        } else {
          element.classList.add('d-none');
          element.classList.remove('search-active');
        }
      });
    };
  };

  initPageTree();
  initThemeSwitcher();
  initTableOfContents();
  initIndexSearch();
})();
